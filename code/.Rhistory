devtools::install_github("jennybc/gspreadr")
install.packages(c("boot", "class", "cluster", "codetools", "foreign", "KernSmooth", "lattice", "manipulate", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival"))
install.packages("devtools")
devtools::install_github("jennybc/gspreadr")
list_sheets()
library(gspreadr)
install.packages("Rcpp")
library(devtools)
library(gspreadr)
devtools::install_github("jennybc/gspreadr")
library(gspreadr)
library(googlesheets)
library(googlesheets)
gs_auth
gs_auth()
gs_ls()
library(ggplot2)
library(gridExtra)
library(plyr)
library(reshape2)
library(metafor)
library(multcomp)
source('rmdCode/mytheme.R')
source('rmdCode/mytheme.R')
library(plyr)
library(reshape2)
library(ggplot2)
library(ggthemes)
library(GGally)
library(gridExtra)
library(lme4)
library(lmerTest)
source('CODE/mytheme.R')
source('CODE/fxn_FitPlot.R')
figuresPath<-file.path(getwd()[1], "FIGURES_TABLES") #where to put the saved plots
fig.height<-2.5 #inches
fig.width<- 2.5 #inches
fig.res<-300
synthdataPath<-file.path(getwd()[1], "DATA", "DATA_SYNTHESIZED") #where to put the clean dataframes
soilData<-read.table("DATA/e8_plothalfSoilData.txt", header=TRUE, sep="\t", stringsAsFactors = FALSE)
vegData<-read.table("DATA/e8_plothalfVegData.txt", header=TRUE, sep="\t", stringsAsFactors = FALSE)
plotLoc<-read.table("DATA/e8_plotLoc.txt", header=TRUE, sep="\t", stringsAsFactors = FALSE)
plotTrees<-read.table("DATA/e8_plotTrees.txt", header=TRUE, sep="\t", stringsAsFactors = FALSE)
soilData.dict<-read.table("DATA/e8_plothalfSoilData_dictionary.txt", header=TRUE, sep="\t", stringsAsFactors = FALSE)
vegData.dict<-read.table("DATA/e8_plothalfVegData_dictionary.txt", header=TRUE, sep="\t", stringsAsFactors = FALSE)
plotLoc.dict<-read.table("DATA/e8_plotLoc_dictionary.txt", header=TRUE, sep="\t", stringsAsFactors = FALSE)
plotTrees.dict<-read.table("DATA/e8_plotTrees_dictionary.txt", header=TRUE, sep="\t", stringsAsFactors = FALSE)
timeline<-read.table("DATA/e8_timeline.txt", header=TRUE, sep="\t", stringsAsFactors = FALSE)
# SOIL DATA
soilData$plothalfid1<-paste(soilData$inv,soilData$plotid, sep="_") #add new identifiers
removeCols<-c('plothalfid','site','rep') #prune columns
soilData.pruned<-soilData[,!colnames(soilData) %in% removeCols]
#reshape so that each depth x meas has its own column
soilData_melted <- melt(soilData.pruned,
id.vars=c("plotid","plothalfid1",
"inv","depth","year"),
variable.name = "measCat")
soilData_melted$measCat2<-paste(soilData_melted$measCat, soilData_melted$depth, sep = '_')
soilData_cast <- dcast(soilData_melted, plotid + plothalfid1 + inv + year ~ measCat2, value.var="value")
soilData_c<-soilData_cast
# VEG DATA
vegData$plothalfid1<-paste(vegData$inv,vegData$plotid, sep="_") #add new identifiers
vegData.pruned<-vegData[,!colnames(vegData) %in% removeCols] #prune columns
vegData.pruned$total<-vegData.pruned$mv+vegData.pruned$nat #make a total understory biomass variable
vegData.dict[c(2,4),c('v7','v8','v9')]
paste('Dry biomass values are currently in units of g/.1875m2')
ConvertBiom<-function(currVal){newVal <- currVal / 0.1875}
vegData.pruned$mv_g.m2<-ConvertBiom(vegData.pruned$mv)
vegData.pruned$nat_g.m2<-ConvertBiom(vegData.pruned$nat)
vegData.pruned$litter_g.m2<-ConvertBiom(vegData.pruned$litter)
vegData.pruned$total_g.m2<-ConvertBiom(vegData.pruned$total)
colsOldUnits<-c('mv','nat','litter','total')
vegData_c<-vegData.pruned[,!colnames(vegData.pruned) %in% colsOldUnits] #prune columns
#add vegData
soilVegData<-merge(soilData_c, vegData_c) #merge soilData_cast and vegData
# TREE DATA
plotTrees$basalArea.m2<-(plotTrees$dbh * plotTrees$dbh) * 0.00007854 #calculate basal area/m2 from each tree's dbh value
#summarize the total basal area/m2 per plot and that which is made up by either AM- or ECM-associated trees
plotTrees.summ<-ddply(plotTrees, ~plotid, summarize,
nTrees=length(plotid),
BA_total=sum(basalArea.m2, na.rm=T),
BA_AM=sum(basalArea.m2[myc=='A'], na.rm=T),
BA_ECM=sum(basalArea.m2[myc=='E'], na.rm=T),
PercBA_AM=(BA_AM/BA_total)*100,
PercBA_ECM=(BA_ECM/BA_total)*100)
#update the number of trees (there was a cell that was counted even for plots where there were no trees
plotTrees.summ[plotTrees.summ$plotid %in% c(12,15),'nTrees']<-0
plotTrees.summ[plotTrees.summ$plotid %in% c(12,15),c('PercBA_AM','PercBA_ECM')]<-NA
tmp<-plotTrees.summ[,c('plotid','nTrees','BA_total','PercBA_AM')]
trees_c<-tmp
#add tree data
data<-merge(soilVegData, trees_c)
# FULL DATASET
str(data)
#LIBRARIES
library(plyr)
library(reshape2)
library(ggplot2) #plotting
library(ggthemes) #ggplot accessories
library(GGally) #????
library(gtable)
library(gridExtra) #for grid.arrange fxn
library(lme4) #for mixed-effects models
library(lmerTest) #for lmer p-values
library(ggbiplot) #for pretty biplots
library(vegan) #for adonis fxn to do perMANOVAs
library(lavaan) #for structural equation modeling
library(doBy) #the orderBy fxn
#FIGURES
source('CODE/mytheme.R')
figuresPath<-file.path(getwd()[1], "FIGURES_TABLES") #where to put the saved plots
fig.height<-2.5 #inches
fig.width<- 2.5 #inches
fig.res<-300
#SYNTHESIZED DATAFRAMES
synthdataPath<-file.path(getwd()[1], "DATA", "DATA_SYNTHESIZED") #where to put the clean dataframes
#IMPORT RAW DATA
soilData<-read.table("DATA/e8_plothalfSoilData.txt", header=TRUE, sep="\t", stringsAsFactors = FALSE)
vegData<-read.table("DATA/e8_plothalfVegData.txt", header=TRUE, sep="\t", stringsAsFactors = FALSE)
plotLoc<-read.table("DATA/e8_plotLoc.txt", header=TRUE, sep="\t", stringsAsFactors = FALSE)
plotTrees<-read.table("DATA/e8_plotTrees.txt", header=TRUE, sep="\t", stringsAsFactors = FALSE)
soilData.dict<-read.table("DATA/e8_plothalfSoilData_dictionary.txt", header=TRUE, sep="\t", stringsAsFactors = FALSE)
vegData.dict<-read.table("DATA/e8_plothalfVegData_dictionary.txt", header=TRUE, sep="\t", stringsAsFactors = FALSE)
plotLoc.dict<-read.table("DATA/e8_plotLoc_dictionary.txt", header=TRUE, sep="\t", stringsAsFactors = FALSE)
plotTrees.dict<-read.table("DATA/e8_plotTrees_dictionary.txt", header=TRUE, sep="\t", stringsAsFactors = FALSE)
timeline<-read.table("DATA/e8_timeline.txt", header=TRUE, sep="\t", stringsAsFactors = FALSE)
#CLEAN AND MERGE
source('CODE/script_cleanMerge.R')
#saves plot 'pHist_depth.png'
#saves data 'data_a.txt' # aggregated mean(depth) for 2012 and 2013
#saves data 'data_d.txt' # removed variables that were only measured in 2011 (i.e. full soil depth 0-15cm measurements)
data.choice<-data_d #decide which dataset to use
#CUSTOM FUNCTIONS
source('CODE/fxn_InvEffect.R') #used in Q1
source('CODE/fxn_ggbiplot_q1.R') #used in Q1
source('CODE/fxn_ExplainDiffVar.R') #used in Q2
source('CODE/fxn_InteractionPlot_DF.R') #used in Q2
source('CODE/fxn_Interaction_MakeNewDat.R') #used in Q2
source('CODE/fxn_XYPlot_DF.R') #used in Q2
source('CODE/fxn_ggbiplot_q3.R') #used in Q3
source('CODE/fxn_XYPlot_DF2.R') #used in Q3
detach("package:datasets", unload=TRUE)
detach("package:graphics", unload=TRUE)
detach("package:grDevices", unload=TRUE)
detach("package:methods", unload=TRUE)
detach("package:stats", unload=TRUE)
detach("package:utils", unload=TRUE)
install.packages(c("class", "coda", "coin", "curl", "data.table", "devtools", "dplyr", "evaluate", "formatR", "git2r", "highr", "jsonlite", "lme4", "lsmeans", "MASS", "Matrix", "mgcv", "mime", "nnet", "packrat", "party", "partykit", "randomForest", "Rcpp", "rgl", "rmarkdown", "roxygen2", "rstudioapi", "sandwich", "spatial", "tidyr", "vegan", "xml2"))
installed.packages()
installed.packages()
utils::installed.packages
installed.packages()
library("utils", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
installed.packages()
install.packages(c("class", "coda", "coin"))
install.packages(c("curl", "data.table", "devtools"))
p <- available.packages()
available.packages()
thing<-available.packages()
installed.packages()
thing<-available.packages()
View(thing)
install.packages(c("dplyr", "evaluate", "formatR"))
install.packages(c("git2r", "highr", "jsonlite"))
install.packages(c("lme4", "lsmeans", "MASS"))
install.packages(c("Matrix", "mgcv", "mime"))
install.packages(c("nnet", "packrat", "party"))
install.packages(c("partykit", "randomForest", "Rcpp"))
install.packages(c("rmarkdown", "roxygen2", "rstudioapi"))
install.packages(c("sandwich", "spatial", "tidyr"))
install.packages(c("rgl", "vegan", "xml2"))
install.packages("mgcv")
install.packages("rgl")
